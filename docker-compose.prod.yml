services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: boilerplate_db
    environment:
      POSTGRES_DB: boilerplate_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./packages/database/workspace-seed.sql:/docker-entrypoint-initdb.d/02-workspace-seed.sql
      - ./packages/database/agents-seed.sql:/docker-entrypoint-initdb.d/03-agents-seed.sql
    command: >
      postgres
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c work_mem=16MB
      -c random_page_cost=1.1
      -c synchronous_commit=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d boilerplate_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - boilerplate-network

  # Restack Engine
  restack:
    image: ghcr.io/restackio/restack:main
    pull_policy: always
    container_name: restack
    ports:
      - "5233:5233"
      - "7233:7233"
      - "7233:7233"
      - "9233:9233"
      - "10233:10233"
      - "11233:11233"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5233/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - boilerplate-network

  # Backend Service - Using unified Dockerfile
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: final-python
      args:
        APP_NAME: backend
        PORT: 80
    container_name: boilerplate_backend
    environment:
      - RESTACK_ENGINE_ADDRESS=host.docker.internal:7233
      - RESTACK_ENGINE_API_ADDRESS=host.docker.internal:6233
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/boilerplate_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - boilerplate-network
    restart: unless-stopped

  # MCP Server Service - Using unified Dockerfile
  mcp_server:
    build:
      context: .
      dockerfile: Dockerfile
      target: final-python
      args:
        APP_NAME: mcp_server
        PORT: 80
    container_name: boilerplate_mcp_server
    environment:
      - RESTACK_ENGINE_ADDRESS=host.docker.internal:7233
      - RESTACK_ENGINE_API_ADDRESS=host.docker.internal:6233
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/boilerplate_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - boilerplate-network
    restart: unless-stopped

  # Webhook Service - Using unified Dockerfile
  webhook:
    build:
      context: .
      dockerfile: Dockerfile
      target: final-python
      args:
        APP_NAME: webhook
        PORT: 8000
    container_name: boilerplate_webhook
    ports:
      - "8000:8000"
    environment:
      - RESTACK_ENGINE_ADDRESS=host.docker.internal:7233
      - RESTACK_ENGINE_API_ADDRESS=host.docker.internal:6233
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/boilerplate_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - boilerplate-network
    restart: unless-stopped

  # Frontend Service - Using unified Dockerfile
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: final-node
      args:
        APP_SCOPE: boilerplate-frontend
        PORT: 3000
    container_name: boilerplate_frontend
    ports:
      - "3000:3000"
    environment:
      - RESTACK_ENGINE_ADDRESS=host.docker.internal:7233
      - RESTACK_ENGINE_API_ADDRESS=host.docker.internal:6233
      - NODE_ENV=production
    depends_on:
      - backend
      - mcp_server
      - webhook
    networks:
      - boilerplate-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  boilerplate-network:
    driver: bridge
