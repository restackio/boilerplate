name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  node-lint-and-typecheck:
    name: Node Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.1'
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Run linting and type checking in parallel
        run: |
          pnpm lint --filter='boilerplate-frontend' --filter='@workspace/ui' &
          turbo type-check --filter='boilerplate-frontend' --filter='@workspace/ui' &
          wait

  python-lint:
    name: Python Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install Python dependencies (Backend)
        working-directory: ./apps/backend
        run: uv sync --frozen

      - name: Lint Backend
        working-directory: ./apps/backend
        run: uv run ruff check .

      - name: Install Python dependencies (MCP Server)
        working-directory: ./apps/mcp_server
        run: uv sync --frozen

      - name: Lint MCP Server
        working-directory: ./apps/mcp_server
        run: uv run ruff check .

      - name: Install Python dependencies (Webhook)
        working-directory: ./apps/webhook
        run: uv sync --frozen

      - name: Lint Webhook
        working-directory: ./apps/webhook
        run: uv run ruff check src

  documentation-lint:
    name: Documentation Lint (Vale)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vale
        run: |
          wget -O vale.tar.gz https://github.com/errata-ai/vale/releases/download/v3.7.1/vale_3.7.1_Linux_64-bit.tar.gz
          mkdir -p /tmp/vale
          tar -xzf vale.tar.gz -C /tmp/vale
          sudo mv /tmp/vale/vale /usr/local/bin/
          rm -rf /tmp/vale vale.tar.gz

      - name: Sync Vale packages
        run: vale sync

      - name: Run Vale
        run: vale --config=.vale.ini README.md CONTRIBUTING.md apps/*/README.md packages/*/README.md
