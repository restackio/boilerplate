# ============
# UV Base Stage - Pre-baked with Python and uv
# ============
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim AS uv-base
# This stage uses the official uv image with Python 3.12

# ============
# Base stage with common dependencies
# ============
FROM node:20-bullseye-slim AS base
# Use the official Node 20 image based on bullseye slim.
# This stage serves as the base image for all subsequent stages.

# Install common dependencies once including build tools for Python packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        build-essential \
        pkg-config \
        libssl-dev \
        && update-ca-certificates \
        && rm -rf /var/lib/apt/lists/*

# Install global tools
RUN npm install -g pnpm@10.12.4 turbo@2.5.4

# ============
# Dependencies stage - Cache dependencies separately
# ============
FROM base AS deps

WORKDIR /app

# Copy uv from the pre-built stage for Python dependency management
COPY --from=uv-base /usr/local/bin/uv /usr/local/bin/uv
COPY --from=uv-base /usr/local/bin/python* /usr/local/bin/
COPY --from=uv-base /usr/local/lib/python* /usr/local/lib/

# Copy package files first for better caching
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml turbo.json ./
COPY apps/*/package.json ./apps/
COPY packages/*/package.json ./packages/

# Copy Python apps completely for building during pnpm install
COPY apps/backend/ ./apps/backend/
COPY apps/mcp_server/ ./apps/mcp_server/
COPY apps/webhook/ ./apps/webhook/

# Copy frontend app for turbo prune to work
COPY apps/frontend/ ./apps/frontend/

# Copy packages for workspace dependencies
COPY packages/ ./packages/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Install Python dependencies for all apps to avoid runtime compilation
RUN cd apps/backend && uv sync --frozen
RUN cd apps/mcp_server && uv sync --frozen
RUN cd apps/webhook && uv sync --frozen

# ============
# Builder stage
# ============
FROM deps AS builder

WORKDIR /app

# Build with parallel execution and better caching
RUN pnpm build

# ============
# Final Runner stage
# ============
FROM node:20-alpine AS runner

WORKDIR /app

# Install pnpm globally in the runner stage
RUN npm install -g pnpm@10.12.4

# Copy uv and Python from the pre-built stage
COPY --from=uv-base /usr/local/bin/uv /usr/local/bin/uv
COPY --from=uv-base /usr/local/bin/python* /usr/local/bin/
COPY --from=uv-base /usr/local/lib/python* /usr/local/lib/

# Copy the production-ready built application from the builder stage
COPY --from=builder /app .

# Install runtime dependencies
RUN apk add --no-cache curl

# Expose the ports required for your services
# 3000: Frontend (Next.js)
# 8000: Webhook service
EXPOSE 3000 8000

# Start the application using pnpm and turbo
CMD ["pnpm", "start"]

# # Dummy shell for troubleshooting
# CMD ["sh"]
